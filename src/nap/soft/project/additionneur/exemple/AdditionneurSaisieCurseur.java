/*
 * AdditionneurVueSaisieCurseur.java
 *
 * Created on 29 septembre 2008, 18:53
 */
package nap.soft.project.additionneur.exemple;

import nap.soft.project.additionneur.architecturemvc.AdditionneurModele;
import nap.soft.project.additionneur.architecturemvc.AdditionneurOverflowException;
import nap.soft.project.additionneur.architecturemvc.Termes;
import nap.soft.project.additionneur.vue.AbstractAdditionneurVue;
import nap.soft.project.additionneur.vue.outils.MonSlider;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

/**
 * Panel permettant de modifier les termes de l'addition au travers de sliders
 */
public class AdditionneurSaisieCurseur extends AbstractAdditionneurVue{

    private AdditionneurModele modele;

    public AdditionneurSaisieCurseur() {
        initComponents();
                PropertyChangeListener monListenerDeTermes = new PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent pce) {
                faitCalculer();
            }
        };
        jTerme1.addPropertyChangeListener(MonSlider.VALUE_CHANGED, monListenerDeTermes);
        jTerme2.addPropertyChangeListener(MonSlider.VALUE_CHANGED, monListenerDeTermes);
    }

    /**
     * Creates new form AdditionneurVueSaisieCurseur
     * @param aModele
     */
    public AdditionneurSaisieCurseur(AdditionneurModele aModele) {
        this();
        setModele(aModele);
    }

    /**
     * fournit au panel un nouveau mod√®le
     * @param aMod 
     */
    public void setModele(AdditionneurModele aMod) {
        modele = aMod;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTerme1 = new nap.soft.project.additionneur.vue.outils.MonSlider();
        jTerme2 = new nap.soft.project.additionneur.vue.outils.MonSlider();

        setMinimumSize(new java.awt.Dimension(600, 105));
        setPreferredSize(new java.awt.Dimension(600, 105));
        setLayout(new java.awt.BorderLayout(10, 10));

        jTerme1.setMinimumSize(new java.awt.Dimension(560, 41));
        jTerme1.setPreferredSize(new java.awt.Dimension(560, 41));
        add(jTerme1, java.awt.BorderLayout.PAGE_START);

        jTerme2.setMinimumSize(new java.awt.Dimension(560, 41));
        jTerme2.setPreferredSize(new java.awt.Dimension(560, 41));
        add(jTerme2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void faitCalculer() {
        try {
            modele.calcule(new Termes(jTerme1.getValue(), jTerme2.getValue()));
        } catch (AdditionneurOverflowException e) {
            // Sans objet
        }
    }
    
    @Override
    public void notifieChangement() {
        jTerme1.setValue(getModele().getEtat().getTerme1());
        jTerme2.setValue(getModele().getEtat().getTerme2());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private nap.soft.project.additionneur.vue.outils.MonSlider jTerme1;
    private nap.soft.project.additionneur.vue.outils.MonSlider jTerme2;
    // End of variables declaration//GEN-END:variables

    

}
